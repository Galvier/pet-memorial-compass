
import { PetMemorialAPI } from '@/lib/api';
import { AtribuirAtendimentoRequest } from '@/types';

// Endpoint para assumir atendimento
export async function assumirAtendimento(atendimentoId: number) {
  try {
    console.log('Assumindo atendimento:', atendimentoId);
    
    const result = await PetMemorialAPI.assumirAtendimento(atendimentoId);
    
    console.log('Atendimento assumido com sucesso');
    
    return { success: true, message: 'Atendimento assumido com sucesso' };
  } catch (error) {
    console.error('Erro ao assumir atendimento:', error);
    throw new Error('Erro interno do servidor');
  }
}

// Endpoint para atribuir atendimento a um atendente espec√≠fico
export async function atribuirAtendimento(atendimentoId: number, request: AtribuirAtendimentoRequest) {
  try {
    console.log('Atribuindo atendimento:', atendimentoId, 'para atendente:', request.atendente_id);
    
    const result = await PetMemorialAPI.atribuirAtendimento(atendimentoId, request);
    
    console.log('Atendimento atribu√≠do com sucesso');
    
    return { success: true, message: 'Atendimento atribu√≠do e notifica√ß√£o enviada' };
  } catch (error) {
    console.error('Erro ao atribuir atendimento:', error);
    throw new Error('Erro interno do servidor');
  }
}

// Endpoint para solicita√ß√£o autom√°tica de atendimento humano (Round-Robin)
export async function solicitarAtendimentoHumano(atendimentoId: number) {
  try {
    console.log('ü§ñ Solicitando atendimento humano autom√°tico (Round-Robin) para:', atendimentoId);
    
    const result = await PetMemorialAPI.solicitarAtendimentoHumano(atendimentoId);
    
    console.log('‚úÖ Atendimento atribu√≠do automaticamente via Round-Robin');
    
    return { 
      success: true, 
      message: result.message,
      atendente_atribuido: result.atendente_atribuido 
    };
  } catch (error) {
    console.error('‚ùå Erro na atribui√ß√£o autom√°tica:', error);
    throw new Error('Erro interno do servidor');
  }
}

// Endpoint para verificar status do atendimento
export async function verificarStatusAtendimento(idWhatsapp: string) {
  try {
    console.log('Verificando status do atendimento para:', idWhatsapp);
    
    const result = await PetMemorialAPI.verificarStatusAtendimento(idWhatsapp);
    
    console.log('Status verificado:', result);
    
    return result;
  } catch (error) {
    console.error('Erro ao verificar status:', error);
    throw new Error('Erro interno do servidor');
  }
}

// Simula√ß√£o de endpoints - em uma aplica√ß√£o real, isso seria configurado no servidor
export const simulateAtendimentoAPI = {
  assumir: assumirAtendimento,
  atribuir: atribuirAtendimento,
  solicitarHumano: solicitarAtendimentoHumano,
  verificarStatus: verificarStatusAtendimento
};
