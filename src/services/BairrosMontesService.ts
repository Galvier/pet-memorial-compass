
import { supabase } from '@/integrations/supabase/client';

export interface BairroMontesClaros {
  id: string;
  nome_bairro: string;
  categoria: 'alto' | 'medio' | 'padrao';
  fator_imobiliario: number;
  fator_comercial: number;
  fator_atualizacao_calculado: number;
  preco_medio_m2?: number;
  perfil_comercial?: string;
  ultima_atualizacao: string;
  ativo: boolean;
  created_at: string;
  updated_at: string;
}

/**
 * Servi√ßo para gerenciar dados dos bairros de Montes Claros
 */
export class BairrosMontesService {
  /**
   * Busca dados de um bairro espec√≠fico
   */
  static async getBairroData(nomeBairro: string): Promise<BairroMontesClaros | null> {
    try {
      console.log(`üîç Buscando dados do bairro: ${nomeBairro}`);
      
      const { data, error } = await supabase
        .from('bairros_montes_claros')
        .select('*')
        .ilike('nome_bairro', nomeBairro.trim())
        .eq('ativo', true)
        .maybeSingle();

      if (error) {
        console.warn(`‚ö†Ô∏è Erro ao buscar bairro ${nomeBairro}:`, error);
        return null;
      }

      if (data) {
        console.log(`‚úÖ Dados encontrados para ${nomeBairro}: fator ${data.fator_atualizacao_calculado}x`);
      } else {
        console.log(`‚ùå Bairro ${nomeBairro} n√£o encontrado na base`);
      }

      return data;
    } catch (error) {
      console.error(`‚ùå Erro na consulta do bairro ${nomeBairro}:`, error);
      return null;
    }
  }

  /**
   * Busca dados de um bairro com normaliza√ß√£o de nome
   */
  static async getBairroDataNormalized(nomeBairro: string): Promise<BairroMontesClaros | null> {
    // Tentar busca exata primeiro
    let data = await this.getBairroData(nomeBairro);
    if (data) return data;

    // Tentar varia√ß√µes comuns do nome
    const variations = this.generateNameVariations(nomeBairro);
    
    for (const variation of variations) {
      data = await this.getBairroData(variation);
      if (data) {
        console.log(`‚úÖ Bairro encontrado com varia√ß√£o: "${variation}" para "${nomeBairro}"`);
        return data;
      }
    }

    return null;
  }

  /**
   * Gera varia√ß√µes comuns de nomes de bairros
   */
  private static generateNameVariations(nome: string): string[] {
    const normalized = nome.toLowerCase().trim();
    const variations: string[] = [];

    // Varia√ß√µes de acentua√ß√£o
    const accentMap: Record<string, string> = {
      'c√¢ndida c√¢mara': 'candida camara',
      'candida camara': 'c√¢ndida c√¢mara',
      'maracan√£': 'maracana',
      'maracana': 'maracan√£',
      'jaragu√°': 'jaragua',
      'jaragua': 'jaragu√°',
      'delfino magalh√£es': 'delfino magalhaes',
      'delfino magalhaes': 'delfino magalh√£es',
      's√£o jos√©': 'sao jose',
      'sao jose': 's√£o jos√©',
      'funcion√°rios': 'funcionarios',
      'funcionarios': 'funcion√°rios',
      'vila atl√¢ntida': 'vila atlantida',
      'vila atlantida': 'vila atl√¢ntida'
    };

    if (accentMap[normalized]) {
      variations.push(accentMap[normalized]);
    }

    // Varia√ß√µes com/sem "vila", "bairro", etc.
    if (normalized.startsWith('vila ')) {
      variations.push(normalized.replace('vila ', ''));
    } else if (!normalized.includes('vila') && !normalized.includes('centro')) {
      variations.push(`vila ${normalized}`);
    }

    if (normalized.startsWith('bairro ')) {
      variations.push(normalized.replace('bairro ', ''));
    }

    return variations;
  }

  /**
   * Atualiza dados de um bairro
   */
  static async updateBairroData(
    nomeBairro: string, 
    updates: Partial<Pick<BairroMontesClaros, 'fator_imobiliario' | 'fator_comercial' | 'preco_medio_m2' | 'perfil_comercial'>>
  ): Promise<boolean> {
    try {
      console.log(`üìù Atualizando dados do bairro: ${nomeBairro}`);

      // Calcular novo fator de atualiza√ß√£o se necess√°rio
      let updateData = { ...updates };
      
      if (updates.fator_imobiliario !== undefined || updates.fator_comercial !== undefined) {
        const currentData = await this.getBairroDataNormalized(nomeBairro);
        if (currentData) {
          const novoFatorImobiliario = updates.fator_imobiliario ?? currentData.fator_imobiliario;
          const novoFatorComercial = updates.fator_comercial ?? currentData.fator_comercial;
          
          // F√≥rmula: m√©dia ponderada (60% imobili√°rio, 40% comercial)
          const novoFatorAtualizacao = (novoFatorImobiliario * 0.6) + (novoFatorComercial * 0.4);
          
          updateData = {
            ...updateData,
            fator_atualizacao_calculado: Math.round(novoFatorAtualizacao * 100) / 100
          };
        }
      }

      const { error } = await supabase
        .from('bairros_montes_claros')
        .update({
          ...updateData,
          ultima_atualizacao: new Date().toISOString()
        })
        .ilike('nome_bairro', nomeBairro.trim());

      if (error) {
        console.error(`‚ùå Erro ao atualizar bairro ${nomeBairro}:`, error);
        return false;
      }

      console.log(`‚úÖ Bairro ${nomeBairro} atualizado com sucesso`);
      return true;
    } catch (error) {
      console.error(`‚ùå Erro na atualiza√ß√£o do bairro ${nomeBairro}:`, error);
      return false;
    }
  }

  /**
   * Lista todos os bairros ativos
   */
  static async listAllBairros(): Promise<BairroMontesClaros[]> {
    try {
      const { data, error } = await supabase
        .from('bairros_montes_claros')
        .select('*')
        .eq('ativo', true)
        .order('categoria', { ascending: false })
        .order('nome_bairro');

      if (error) {
        console.error('‚ùå Erro ao listar bairros:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå Erro na consulta de bairros:', error);
      return [];
    }
  }

  /**
   * Obt√©m estat√≠sticas dos bairros por categoria
   */
  static async getBairrosStats(): Promise<{
    total: number;
    porCategoria: Record<string, number>;
    fatorMedio: number;
    ultimaAtualizacao?: string;
  }> {
    try {
      const bairros = await this.listAllBairros();
      
      const stats = {
        total: bairros.length,
        porCategoria: {
          alto: bairros.filter(b => b.categoria === 'alto').length,
          medio: bairros.filter(b => b.categoria === 'medio').length,
          padrao: bairros.filter(b => b.categoria === 'padrao').length
        },
        fatorMedio: bairros.length > 0 
          ? Math.round((bairros.reduce((sum, b) => sum + b.fator_atualizacao_calculado, 0) / bairros.length) * 100) / 100
          : 1.0,
        ultimaAtualizacao: bairros.length > 0 
          ? new Date(Math.max(...bairros.map(b => new Date(b.ultima_atualizacao).getTime()))).toISOString()
          : undefined
      };

      return stats;
    } catch (error) {
      console.error('‚ùå Erro ao calcular estat√≠sticas:', error);
      return {
        total: 0,
        porCategoria: { alto: 0, medio: 0, padrao: 0 },
        fatorMedio: 1.0
      };
    }
  }

  /**
   * Extrai nome do bairro de um endere√ßo completo
   */
  static extractBairroFromAddress(address: string): string | null {
    try {
      const parts = address.split(',').map(part => part.trim());
      
      // Procurar por padr√µes comuns de bairro
      for (const part of parts) {
        const cleaned = part.toLowerCase()
          .replace(/^(rua|av|avenida|pra√ßa|praca|r\.|av\.)\s+/i, '')
          .replace(/\s+\d+.*$/, '') // Remove n√∫meros
          .trim();

        if (cleaned.length > 2 && !cleaned.match(/\d/) && cleaned !== 'mg' && cleaned !== 'montes claros') {
          // Verificar se √© um bairro conhecido
          const knownBairros = [
            'ibituruna', 'morada do sol', 'augusta mota', 'centro', 'todos os santos', 
            'c√¢ndida c√¢mara', 'candida camara', 'major prates', 'maracan√£', 'maracana',
            'delfino magalh√£es', 'delfino magalhaes', 's√£o jos√©', 'sao jose', 'vila oliveira',
            'cintra', 'jaragu√°', 'jaragua', 'funcion√°rios', 'funcionarios', 'vila atl√¢ntida', 'vila atlantida'
          ];

          if (knownBairros.some(bairro => 
            cleaned.includes(bairro) || bairro.includes(cleaned) || 
            this.similarity(cleaned, bairro) > 0.8
          )) {
            return cleaned;
          }
        }
      }

      return null;
    } catch (error) {
      console.warn('Erro ao extrair bairro do endere√ßo:', error);
      return null;
    }
  }

  /**
   * Calcula similaridade entre strings (Jaro-Winkler simplificado)
   */
  private static similarity(s1: string, s2: string): number {
    const longer = s1.length > s2.length ? s1 : s2;
    const shorter = s1.length > s2.length ? s2 : s1;
    
    if (longer.length === 0) return 1.0;
    
    const editDistance = this.levenshteinDistance(longer, shorter);
    return (longer.length - editDistance) / longer.length;
  }

  /**
   * Calcula dist√¢ncia de Levenshtein
   */
  private static levenshteinDistance(s1: string, s2: string): number {
    const matrix = Array(s2.length + 1).fill(null).map(() => Array(s1.length + 1).fill(null));
    
    for (let i = 0; i <= s1.length; i++) matrix[0][i] = i;
    for (let j = 0; j <= s2.length; j++) matrix[j][0] = j;
    
    for (let j = 1; j <= s2.length; j++) {
      for (let i = 1; i <= s1.length; i++) {
        const indicator = s1[i - 1] === s2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1,
          matrix[j - 1][i] + 1,
          matrix[j - 1][i - 1] + indicator
        );
      }
    }
    
    return matrix[s2.length][s1.length];
  }
}
