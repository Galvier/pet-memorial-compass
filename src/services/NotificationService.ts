
/**
 * Servi√ßo para envio de notifica√ß√µes em tempo real para atendentes
 * Integra com n8n para envio de mensagens WhatsApp
 */

interface NotificationPayload {
  to: string;
  text: string;
  attendant_name?: string;
  client_name?: string;
  attendance_id?: number;
}

interface NotificationResponse {
  success: boolean;
  message: string;
  error?: string;
}

export class NotificationService {
  private static n8nWebhookUrl: string | null = null;

  /**
   * Configura a URL do webhook do n8n
   * Em uma aplica√ß√£o real, isso viria de vari√°veis de ambiente
   */
  static setWebhookUrl(url: string) {
    this.n8nWebhookUrl = url;
    console.log('üîó URL do webhook n8n configurada');
  }

  /**
   * Envia notifica√ß√£o para atendente via n8n
   */
  static async sendToAttendant(
    attendantWhatsapp: string, 
    message: string, 
    metadata?: {
      attendant_name?: string;
      client_name?: string;
      attendance_id?: number;
    }
  ): Promise<NotificationResponse> {
    try {
      console.log('üì≤ Enviando notifica√ß√£o para atendente:', attendantWhatsapp);

      if (!this.n8nWebhookUrl) {
        console.warn('‚ö†Ô∏è URL do webhook n8n n√£o configurada - simulando envio');
        
        // Simular o envio da notifica√ß√£o
        console.log(`üì± SIMULA√á√ÉO - Mensagem enviada para ${attendantWhatsapp}:`);
        console.log(`üìù Conte√∫do: ${message}`);
        
        return {
          success: true,
          message: 'Notifica√ß√£o simulada com sucesso'
        };
      }

      const payload: NotificationPayload = {
        to: attendantWhatsapp,
        text: message,
        ...metadata
      };

      const response = await fetch(this.n8nWebhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      console.log('‚úÖ Notifica√ß√£o enviada com sucesso para:', attendantWhatsapp);
      
      return {
        success: true,
        message: 'Notifica√ß√£o enviada com sucesso'
      };

    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
      
      return {
        success: false,
        message: 'Erro ao enviar notifica√ß√£o',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Formata mensagem padr√£o para atribui√ß√£o de atendimento
   */
  static formatAssignmentMessage(
    attendantName: string,
    clientName: string,
    clientWhatsapp: string,
    attendanceId: number,
    attendanceType: string
  ): string {
    return `ü§ñ *NOVA ATRIBUI√á√ÉO AUTOM√ÅTICA*

Ol√°, ${attendantName}!

Um cliente solicitou atendimento humano e voc√™ foi automaticamente selecionado.

üìã *Detalhes do Atendimento:*
‚Ä¢ Cliente: ${clientName}
‚Ä¢ WhatsApp: ${clientWhatsapp}
‚Ä¢ Tipo: ${attendanceType}
‚Ä¢ ID: #${attendanceId}

‚ö° Por favor, assuma a conversa o mais r√°pido poss√≠vel!

üîó Acesse o painel para ver mais detalhes.`;
  }

  /**
   * Envia notifica√ß√£o formatada para atribui√ß√£o autom√°tica
   */
  static async notifyAutomaticAssignment(
    attendant: { nome_atendente: string; whatsapp_atendente: string },
    client: { nome_tutor: string; id_whatsapp: string },
    attendanceId: number,
    attendanceType: string
  ): Promise<NotificationResponse> {
    const message = this.formatAssignmentMessage(
      attendant.nome_atendente,
      client.nome_tutor,
      client.id_whatsapp,
      attendanceId,
      attendanceType
    );

    return this.sendToAttendant(
      attendant.whatsapp_atendente,
      message,
      {
        attendant_name: attendant.nome_atendente,
        client_name: client.nome_tutor,
        attendance_id: attendanceId
      }
    );
  }

  /**
   * Retorna exemplo de configura√ß√£o para n8n
   */
  static getN8nIntegrationExample() {
    return {
      webhook_trigger: {
        description: "Configure um n√≥ Webhook no n8n como trigger",
        method: "POST",
        expected_payload: {
          to: "5511999999999",
          text: "Mensagem a ser enviada",
          attendant_name: "Nome do Atendente",
          client_name: "Nome do Cliente",
          attendance_id: 123
        }
      },
      whatsapp_node: {
        description: "Adicione um n√≥ WhatsApp ap√≥s o webhook",
        configuration: {
          to_number: "{{$json.body.to}}",
          message_text: "{{$json.body.text}}"
        }
      }
    };
  }
}
