
import { GeocodingService } from './GeocodingService';
import { IBGEApiService } from './IBGEApiService';

export interface LocationAnalysis {
  address: string;
  coordinates: { lat: number; lng: number } | null;
  sectorData: {
    id: string;
    name: string;
    municipio: string;
    uf: string;
  } | null;
  incomeData: {
    averageIncome: number;
    populationCount: number;
    dataYear: number;
  } | null;
  score: number;
  scoreReason: string;
  analysisDate: string;
  success: boolean;
}

/**
 * Servi√ßo principal para an√°lise de localiza√ß√£o com dados do IBGE
 */
export class LocationAnalysisService {
  private static readonly DEFAULT_SCORE = 25;
  private static readonly DEFAULT_REASON = 'Pontua√ß√£o padr√£o aplicada';

  /**
   * Fun√ß√£o principal: analisa um endere√ßo e retorna pontua√ß√£o baseada em dados do IBGE
   */
  static async getScoreFromAddress(address: string): Promise<LocationAnalysis> {
    const startTime = Date.now();
    console.log(`üîç Iniciando an√°lise de localiza√ß√£o para: "${address}"`);

    const analysis: LocationAnalysis = {
      address,
      coordinates: null,
      sectorData: null,
      incomeData: null,
      score: this.DEFAULT_SCORE,
      scoreReason: this.DEFAULT_REASON,
      analysisDate: new Date().toISOString(),
      success: false
    };

    try {
      // Passo 1: Obter coordenadas do endere√ßo
      console.log('üìç Passo 1: Geocodifica√ß√£o do endere√ßo');
      const coordinates = await GeocodingService.getCoordsFromAddress(address);
      
      if (!coordinates) {
        analysis.scoreReason = 'Endere√ßo n√£o encontrado - usando pontua√ß√£o padr√£o';
        console.log('‚ùå Endere√ßo n√£o geocodificado, usando pontua√ß√£o padr√£o');
        return analysis;
      }

      analysis.coordinates = coordinates;
      console.log(`‚úÖ Coordenadas obtidas: ${coordinates.lat}, ${coordinates.lng}`);

      // Passo 2: Obter setor censit√°rio
      console.log('üó∫Ô∏è Passo 2: Consulta do setor censit√°rio IBGE');
      const sectorData = await IBGEApiService.getSectorFromCoordinates(
        coordinates.lat, 
        coordinates.lng
      );

      if (!sectorData) {
        analysis.scoreReason = 'Setor censit√°rio n√£o encontrado - usando pontua√ß√£o padr√£o';
        console.log('‚ùå Setor censit√°rio n√£o encontrado, usando pontua√ß√£o padr√£o');
        return analysis;
      }

      analysis.sectorData = {
        id: sectorData.id,
        name: sectorData.name,
        municipio: sectorData.municipio,
        uf: sectorData.uf
      };
      console.log(`‚úÖ Setor censit√°rio: ${sectorData.id} em ${sectorData.municipio}/${sectorData.uf}`);

      // Passo 3: Obter dados de renda
      console.log('üí∞ Passo 3: Consulta de dados de renda IBGE');
      const incomeData = await IBGEApiService.getIncomeFromSector(sectorData.id);

      if (!incomeData) {
        analysis.scoreReason = 'Dados de renda n√£o dispon√≠veis - usando pontua√ß√£o padr√£o';
        console.log('‚ùå Dados de renda n√£o encontrados, usando pontua√ß√£o padr√£o');
        return analysis;
      }

      analysis.incomeData = {
        averageIncome: incomeData.averageIncome,
        populationCount: incomeData.populationCount,
        dataYear: incomeData.dataYear
      };

      // Passo 4: Calcular pontua√ß√£o final
      console.log('üßÆ Passo 4: C√°lculo da pontua√ß√£o final');
      const score = IBGEApiService.calculateScoreFromIncome(incomeData.averageIncome);
      
      analysis.score = score;
      analysis.scoreReason = `Renda m√©dia R$ ${incomeData.averageIncome.toFixed(2)} (${incomeData.dataYear}) = ${score} pontos`;
      analysis.success = true;

      const elapsedTime = Date.now() - startTime;
      console.log(`‚úÖ An√°lise conclu√≠da com sucesso em ${elapsedTime}ms`);
      console.log(`üìä Resultado: ${score} pontos (${analysis.scoreReason})`);

      return analysis;

    } catch (error) {
      const elapsedTime = Date.now() - startTime;
      console.error(`‚ùå Erro na an√°lise de localiza√ß√£o ap√≥s ${elapsedTime}ms:`, error);
      
      analysis.scoreReason = `Erro na an√°lise: ${error.message || 'Erro desconhecido'} - usando pontua√ß√£o padr√£o`;
      return analysis;
    }
  }

  /**
   * An√°lise em lote de m√∫ltiplos endere√ßos
   */
  static async batchAnalyzeAddresses(addresses: string[]): Promise<LocationAnalysis[]> {
    console.log(`üìä Iniciando an√°lise em lote de ${addresses.length} endere√ßos`);
    
    const results: LocationAnalysis[] = [];
    const batchSize = 3; // Processar em lotes pequenos para n√£o sobrecarregar as APIs
    
    for (let i = 0; i < addresses.length; i += batchSize) {
      const batch = addresses.slice(i, i + batchSize);
      console.log(`üîÑ Processando lote ${Math.floor(i / batchSize) + 1} de ${Math.ceil(addresses.length / batchSize)}`);
      
      const batchPromises = batch.map(address => this.getScoreFromAddress(address));
      const batchResults = await Promise.all(batchPromises);
      
      results.push(...batchResults);
      
      // Pausa entre lotes para respeitar rate limits
      if (i + batchSize < addresses.length) {
        console.log('‚è∏Ô∏è Pausa entre lotes...');
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    const successCount = results.filter(r => r.success).length;
    console.log(`‚úÖ An√°lise em lote conclu√≠da: ${successCount}/${addresses.length} sucessos`);
    
    return results;
  }

  /**
   * Limpar cache de an√°lises antigas
   */
  static clearCache(): void {
    try {
      const keys = Object.keys(localStorage);
      const ibgeKeys = keys.filter(key => key.startsWith('ibge_'));
      
      ibgeKeys.forEach(key => localStorage.removeItem(key));
      
      console.log(`üßπ Cache limpo: ${ibgeKeys.length} entradas removidas`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar cache:', error);
    }
  }
}
