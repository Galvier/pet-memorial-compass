
import { GeocodingService } from './GeocodingService';
import { IBGEApiService } from './IBGEApiService';
import { EnhancedLocationAnalysisService } from './EnhancedLocationAnalysisService';

export interface LocationAnalysis {
  address: string;
  coordinates: { lat: number; lng: number } | null;
  municipioData: {
    id: string;
    nome: string;
    uf: string;
  } | null;
  incomeData: {
    averageIncome: number;
    populationCount: number;
    dataYear: number;
  } | null;
  score: number;
  scoreReason: string;
  analysisDate: string;
  success: boolean;
  fallbackUsed: boolean;
}

/**
 * Servi√ßo principal para an√°lise de localiza√ß√£o com dados do IBGE
 * Atualizado para usar o sistema aprimorado com cache e fallback
 */
export class LocationAnalysisService {
  private static readonly DEFAULT_SCORE = 25;
  private static readonly DEFAULT_REASON = 'Pontua√ß√£o padr√£o aplicada - dados indispon√≠veis';

  /**
   * Fun√ß√£o principal: analisa um endere√ßo e retorna pontua√ß√£o baseada em dados do IBGE
   * Agora usa o servi√ßo aprimorado com cache e fallback
   */
  static async getScoreFromAddress(address: string): Promise<LocationAnalysis> {
    console.log(`üîç An√°lise de localiza√ß√£o para: "${address}" (usando sistema aprimorado)`);
    
    try {
      // Usar o servi√ßo aprimorado que tem cache e fallback robusto
      return await EnhancedLocationAnalysisService.getScoreFromAddress(address);
    } catch (error) {
      console.error('‚ùå Falha no servi√ßo aprimorado, usando fallback b√°sico:', error);
      
      // Fallback para a implementa√ß√£o b√°sica original
      return await this.basicAnalysis(address);
    }
  }

  /**
   * An√°lise b√°sica original como √∫ltimo recurso
   */
  private static async basicAnalysis(address: string): Promise<LocationAnalysis> {
    const startTime = Date.now();
    console.log(`üîô Usando an√°lise b√°sica para: "${address}"`);

    const analysis: LocationAnalysis = {
      address,
      coordinates: null,
      municipioData: null,
      incomeData: null,
      score: this.DEFAULT_SCORE,
      scoreReason: this.DEFAULT_REASON,
      analysisDate: new Date().toISOString(),
      success: false,
      fallbackUsed: true
    };

    try {
      // Passo 1: Obter coordenadas do endere√ßo
      console.log('üìç Passo 1: Geocodifica√ß√£o do endere√ßo');
      const coordinates = await GeocodingService.getCoordsFromAddress(address);
      
      if (!coordinates) {
        analysis.scoreReason = 'Endere√ßo n√£o encontrado - usando pontua√ß√£o padr√£o';
        console.log('‚ùå Endere√ßo n√£o geocodificado, usando pontua√ß√£o padr√£o');
        return analysis;
      }

      analysis.coordinates = coordinates;
      console.log(`‚úÖ Coordenadas obtidas: ${coordinates.lat}, ${coordinates.lng}`);

      // Passo 2: Obter dados do munic√≠pio
      console.log('üèõÔ∏è Passo 2: Consulta do munic√≠pio IBGE');
      const municipioData = await IBGEApiService.getMunicipioFromCoordinates(
        coordinates.lat, 
        coordinates.lng
      );

      if (!municipioData) {
        analysis.scoreReason = 'Munic√≠pio n√£o encontrado - usando pontua√ß√£o padr√£o';
        console.log('‚ùå Munic√≠pio n√£o encontrado, usando pontua√ß√£o padr√£o');
        return analysis;
      }

      analysis.municipioData = {
        id: municipioData.id,
        nome: municipioData.nome,
        uf: municipioData.microrregiao?.mesorregiao?.UF?.sigla || 'N/A'
      };
      console.log(`‚úÖ Munic√≠pio: ${municipioData.nome} (${municipioData.id}) - ${analysis.municipioData.uf}`);

      // Passo 3: Obter dados de renda
      console.log('üí∞ Passo 3: Consulta de dados de renda IBGE');
      const incomeData = await IBGEApiService.getIncomeFromMunicipio(municipioData.id);

      if (!incomeData) {
        analysis.scoreReason = 'Dados de renda n√£o dispon√≠veis - usando pontua√ß√£o padr√£o';
        console.log('‚ùå Dados de renda n√£o encontrados, usando pontua√ß√£o padr√£o');
        return analysis;
      }

      analysis.incomeData = {
        averageIncome: incomeData.averageIncome,
        populationCount: incomeData.populationCount,
        dataYear: incomeData.dataYear
      };

      // Verificar se foi usado fallback
      analysis.fallbackUsed = incomeData.dataYear === 2022 && incomeData.averageIncome === 2500;

      // Passo 4: Calcular pontua√ß√£o final
      console.log('üßÆ Passo 4: C√°lculo da pontua√ß√£o final');
      const score = IBGEApiService.calculateScoreFromIncome(incomeData.averageIncome);
      
      analysis.score = score;
      analysis.scoreReason = analysis.fallbackUsed 
        ? `Dados estimados - Renda m√©dia R$ ${incomeData.averageIncome.toFixed(2)} = ${score} pontos`
        : `Renda m√©dia R$ ${incomeData.averageIncome.toFixed(2)} (${incomeData.dataYear}) = ${score} pontos`;
      analysis.success = true;

      const elapsedTime = Date.now() - startTime;
      console.log(`‚úÖ An√°lise b√°sica conclu√≠da ${analysis.fallbackUsed ? 'com fallback' : 'com sucesso'} em ${elapsedTime}ms`);
      console.log(`üìä Resultado: ${score} pontos (${analysis.scoreReason})`);

      return analysis;

    } catch (error) {
      const elapsedTime = Date.now() - startTime;
      console.error(`‚ùå Erro na an√°lise b√°sica ap√≥s ${elapsedTime}ms:`, error);
      
      analysis.scoreReason = `Erro na an√°lise: ${error.message || 'Erro desconhecido'} - usando pontua√ß√£o padr√£o`;
      analysis.fallbackUsed = true;
      return analysis;
    }
  }

  /**
   * An√°lise em lote de m√∫ltiplos endere√ßos
   */
  static async batchAnalyzeAddresses(addresses: string[]): Promise<LocationAnalysis[]> {
    console.log(`üìä Iniciando an√°lise em lote de ${addresses.length} endere√ßos (sistema aprimorado)`);
    
    try {
      return await EnhancedLocationAnalysisService.batchAnalyzeAddresses(addresses);
    } catch (error) {
      console.error('‚ùå Falha na an√°lise em lote aprimorada, usando b√°sica:', error);
      
      // Fallback para an√°lise sequencial b√°sica
      const results: LocationAnalysis[] = [];
      
      for (const address of addresses) {
        try {
          const result = await this.getScoreFromAddress(address);
          results.push(result);
          
          // Pausa pequena entre an√°lises
          await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
          console.error(`‚ùå Erro na an√°lise de "${address}":`, error);
          results.push({
            address,
            coordinates: null,
            municipioData: null,
            incomeData: null,
            score: this.DEFAULT_SCORE,
            scoreReason: 'Erro na an√°lise',
            analysisDate: new Date().toISOString(),
            success: false,
            fallbackUsed: true
          });
        }
      }
      
      return results;
    }
  }

  /**
   * Limpar cache de an√°lises antigas
   */
  static clearCache(): { success: boolean; message: string; details?: any } {
    try {
      // Usar o servi√ßo aprimorado para limpar cache
      return EnhancedLocationAnalysisService.clearOldCache();
    } catch (error) {
      // Fallback para limpar cache do IBGE apenas
      const result = IBGEApiService.clearCache();
      return {
        success: true,
        message: `Cache IBGE limpo: ${result.cleared} entradas removidas${result.errors > 0 ? `, ${result.errors} erros` : ''}`,
        details: result
      };
    }
  }

  /**
   * Teste de conectividade melhorado com an√°lise real
   */
  static async testConnectivity(): Promise<{ success: boolean; details: any }> {
    try {
      console.log('üîç Testando conectividade com an√°lise real (sistema aprimorado)...');
      
      // Primeiro, teste b√°sico de conectividade
      const basicTest = await IBGEApiService.testConnectivity();
      
      // Teste real de an√°lise usando sistema aprimorado
      const testAddress = 'Centro, Montes Claros, MG';
      const realTest = await EnhancedLocationAnalysisService.getScoreFromAddress(testAddress);
      
      return {
        success: realTest.success,
        details: {
          municipalities: basicTest.municipalities,
          income: basicTest.income,
          realAnalysis: realTest.success,
          enhancedSystem: true,
          cacheUsed: realTest.fallbackUsed,
          message: `An√°lise ${realTest.success ? 'bem-sucedida' : 'falhou'}: ${realTest.scoreReason}`,
          testResult: {
            score: realTest.score,
            source: realTest.fallbackUsed ? 'Cache/Estimativa' : 'IBGE',
            address: testAddress
          }
        }
      };
    } catch (error) {
      return {
        success: false,
        details: {
          municipalities: false,
          income: false,
          enhancedSystem: false,
          message: `Erro no teste: ${error.message || 'Erro desconhecido'}`
        }
      };
    }
  }
}
